-- Debido a complicaciones para poder ejecutar comandos de sql desde local a la nube, pongo la estructura
-- de la base de datos en este archivo schema.sql para poder visualizar el como estanestablecidas

-- Estructura de la base de datos BD_BarberShop en Supabase:

-- =====================================================
-- TABLE: profiles
-- =====================================================
create table public.barberia_servicios (
  id_barberia bigint not null,
  id_servicio bigint not null,
  "precio_BarbServ" numeric null,
  duracion_min text null,
  created_at timestamp with time zone not null default now(),
  constraint barberia_servicios_pkey primary key (id_barberia, id_servicio),
  constraint barberia_servicios_id_barberia_fkey foreign KEY (id_barberia) references barberias (id_barberias),
  constraint barberia_servicios_id_servicio_fkey foreign KEY (id_servicio) references servicios (id_servicio)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: barberias
-- =====================================================
create table public.barberias (
  id_barberias bigint generated by default as identity not null,
  nombre_barberia text null,
  direccion text null,
  telefono text null,
  timezone text null,
  slug text not null,
  portada_url text null,
  barberia_active boolean null default true,
  created_at timestamp with time zone not null default now(),
  constraint barberias_pkey primary key (id_barberias),
  constraint barberias_slug_key unique (slug)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: servicios
-- =====================================================
create table public.servicios (
  id_servicio bigint generated by default as identity not null,
  nombre_servicio text null,
  description text null,
  servicio_active boolean null default true,
  created_at timestamp with time zone not null default now(),
  constraint servicios_pkey primary key (id_servicio)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: barberos
-- =====================================================
create table public.barberos (
  id_barbero bigint generated by default as identity not null,
  id_barberia bigint null,
  calificacion numeric null,
  nombre_barbero text null,
  foto_url text null,
  especialidades text null,
  anios_experiencia bigint null,
  created_at timestamp with time zone not null default now(),
  constraint barberos_pkey primary key (id_barbero),
  constraint barberos_id_barberia_fkey foreign KEY (id_barberia) references barberias (id_barberias)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: barbero_servicios
-- =====================================================
create table public.barbero_servicios (
  id_barbero bigint not null,
  id_servicio bigint not null,
  created_at timestamp with time zone not null default now(),
  constraint barbero_servicios_pkey primary key (id_barbero, id_servicio),
  constraint barbero_servicios_id_barbero_fkey foreign KEY (id_barbero) references barberos (id_barbero),
  constraint barbero_servicios_id_servicio_fkey foreign KEY (id_servicio) references servicios (id_servicio)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: citas
-- =====================================================
create table public.citas (
  id_cita bigint generated by default as identity not null,
  id_cliente bigint null,
  id_barbero bigint null,
  id_servicio bigint null,
  id_barberia bigint null,
  inicio timestamp with time zone null,
  fin timestamp with time zone null,
  estado text null,
  notas text null,
  creada_por bigint null,
  aprobada_por bigint null,
  rechazada_por bigint null,
  motivo_rechazo text null,
  created_at timestamp with time zone not null default now(),
  constraint citas_pkey primary key (id_cita),
  constraint citas_creada_por_fkey foreign KEY (creada_por) references profiles (id_profile),
  constraint citas_id_barberia_fkey foreign KEY (id_barberia) references barberias (id_barberias),
  constraint citas_id_barbero_fkey foreign KEY (id_barbero) references barberos (id_barbero),
  constraint citas_id_cliente_fkey foreign KEY (id_cliente) references profiles (id_profile),
  constraint citas_id_servicio_fkey foreign KEY (id_servicio) references servicios (id_servicio),
  constraint citas_aprobada_por_fkey foreign KEY (aprobada_por) references barberos (id_barbero),
  constraint citas_rechazada_por_fkey foreign KEY (rechazada_por) references barberos (id_barbero)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: pagos
-- =====================================================
create table public.pagos (
  pago_id bigint generated by default as identity not null,
  id_cita bigint null,
  monto bigint null,
  estado text null,
  proveedor text null,
  referencia_proveedor text null,
  created_at timestamp with time zone not null default now(),
  constraint pagos_pkey primary key (pago_id),
  constraint pagos_id_cita_fkey foreign KEY (id_cita) references citas (id_cita)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: reseñas
-- =====================================================
create table public.reseña (
  id_resenia bigint generated by default as identity not null,
  id_cita bigint null,
  id_barbero bigint null,
  calificacion integer null,
  comentario text null,
  created_at timestamp with time zone not null default now(),
  constraint reseña_pkey primary key (id_resenia),
  constraint reseña_id_barbero_fkey foreign KEY (id_barbero) references barberos (id_barbero),
  constraint reseña_id_cita_fkey foreign KEY (id_cita) references citas (id_cita)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: barberias_servicios
-- =====================================================
create table public.barberia_servicios (
  id_barberia bigint not null,
  id_servicio bigint not null,
  "precio_BarbServ" numeric null,
  duracion_min text null,
  created_at timestamp with time zone not null default now(),
  constraint barberia_servicios_pkey primary key (id_barberia, id_servicio),
  constraint barberia_servicios_id_barberia_fkey foreign KEY (id_barberia) references barberias (id_barberias),
  constraint barberia_servicios_id_servicio_fkey foreign KEY (id_servicio) references servicios (id_servicio)
) TABLESPACE pg_default;

-- =====================================================
-- TABLE: horarios_barberia
-- =====================================================
create table public.horarios_barberia (
  id_horario bigint generated by default as identity not null,
  id_barberia bigint null,
  dia_semana integer null,
  hora_apertura time without time zone null,
  hora_cierre time without time zone null,
  abierto boolean null default true,
  created_at timestamp with time zone not null default now(),
  constraint horarios_barberia_pkey primary key (id_horario),
  constraint horarios_barberia_id_barberia_fkey foreign KEY (id_barberia) references barberias (id_barberias)
) TABLESPACE pg_default;

-- -- Evitar solapes de citas confirmadas (para un mismo barbero)
-- alter table public.appointments
--   add constraint no_overlap_for_barber
--   exclude using gist (
--     barber_id with =,
--     tstzrange(starts_at, ends_at) with &&
--   )
--   where (status in ('confirmed'));

-- =====================================================
-- TABLE: payments (pagos)
-- =====================================================
create table public.payments (
  id uuid primary key default gen_random_uuid(),
  appointment_id uuid not null references public.appointments(id) on delete cascade,
  amount_cents integer not null check (amount_cents >= 0),
  currency char(3) not null default 'MXN',
  status payment_status not null default 'pending',
  provider text,
  provider_ref text,
  created_at timestamptz default now()
);

-- =====================================================
-- TABLE: reviews (reseñas)
-- =====================================================
create table public.reviews (
  id uuid primary key default gen_random_uuid(),
  appointment_id uuid unique not null references public.appointments(id) on delete cascade,
  rating smallint not null check (rating between 1 and 5),
  comment text,
  created_at timestamptz default now()
);

-- -- =====================================================
-- -- INDEXES útiles
-- -- =====================================================
-- create index if not exists idx_services_active on public.services (is_active);
-- create index if not exists idx_barber_services_active on public.barber_services (is_active);
-- create index if not exists idx_appointments_barber on public.appointments (barber_id, starts_at);
-- create index if not exists idx_appointments_client on public.appointments (client_id, starts_at);
-- create index if not exists idx_working_hours_weekday on public.working_hours (barber_id, weekday);
-- create index if not exists idx_time_off_range on public.time_off (barber_id, starts_at, ends_at);